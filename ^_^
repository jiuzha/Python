'''
一、编程：有一个需求，有专门负责保存记录的文件名是：mylog.log 的文档，若文件大小超过5M，原文件名则变成 mylog1.log ,
同时另新建一个 mylog.log 文件负责记录数据，若在修改文件名的时候，已经有同名文件存在，先把之前的文件名修改为原序号值加1的文件名，
若原先已经存在 mylog1.log   mylog2.log ，在修改mylog.log 之前，先把 mylog1.log   mylog2.log  按序号变成 mylog2.log  mylog3.log  
再把mylog.log 修改为 mylog1.log ，同时再新建 mylog.log 文件，请用os及其相关模块操作实现。

'''

def rename_log(path,name):
    main_dir,sub_dir,file = next(os.walk(path))
    tar_file = [i for i in file if name.split('.')[0] in i]
    print tar_file
    #匹配数字，从大到小
    old_num = len(tar_file)-1  #老文件，即改过名字的数量

    for i in range(old_num,0,-1):
        #拼接老文件名
        old_name = name.split('.')[0]+str(i)+'.'+name.split('.')[1]
        new_name = name.split('.')[0]+str(i+1)+'.'+name.split('.')[1]
        #拼接完整文件名
        old_name = os.path.join(path,old_name)
        new_name = os.path.join(path,new_name)
        # print new_name,old_name
        #修改名字

        os.rename(old_name,new_name)

    os.rename(os.path.join(path,name),name.split('.')[0]+'1.'+name.split('.')[1])

path = 'E:\\PP\\Review'

rename_log(path,'mylog.log')

二、基本模拟flask中的route()
test_dict = {}

闭包：在一个函数中定义了一个内建函数，内建函数使用了外函数的临时变量，并且外函数的返回值是内建函数的引用，这样就形成了一个闭包。
	必备条件：1.内建函数   2.把内建函数作为上一级函数的返回值。

def test(args):

    def test_1(func):

        test_dict[args] = func

        return func

    return test_1


@test('哈哈')
def a():
    return 123


def inn(b):
    c = test_dict.get(b)()
    print c


inn('哈哈')

三、协程
    概念：在一个单线程里面，能够实现类似于多线程之间切换的效果，但比多线程效率高，多线程切换需要消耗更多的资源，而协程只是 不同函数或者不同子程序之间切换，是在一个线程里执行的切换，是通过生成器yield   用next  for  在函数和生成器之间进行切换。
    
    yield 和return相似，一个带有 yield 的函数就是一个 generator，它和普通函数不同，生成一个 generator 看起来像函数调用，但不会执行任何函数代码，直到对其调用 next()（在 for 循环中会自动调用 next()）才开始执行。虽然执行流程仍按函数的流程执行，但每执行到一个 yield 语句就会中断，并返回一个迭代值，下次执行时从 yield 的下一个语句继续执行。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。
    
    def test():
        yield 5
        print 1
        yield 6
        print 2


    def test1(args):
        print next(args)
        print 100
        next(args)
        print 101


    a = test()
    test1(a)


四、继承

class Grade(object):

    def __init__(self, grade_name):
        self.grade_name = grade_name


class Student(Grade):
    count_1 = 0
    count_2 = 0
    score_dict = {'1班': [], '2班': []}

    def __init__(self, name, score, grade_name):
        Grade.__init__(self, grade_name)
        self.name = name
        self.score = score
        if self.grade_name == '1班':
            Student.count_1 += 1
        if self.grade_name == '2班':
            Student.count_2 += 1
        if self.grade_name == '1班':
            Student.score_dict.get('1班').append(self.score)
        if self.grade_name == '2班':
            Student.score_dict.get('2班').append(self.score)

    @staticmethod
    def rank():
        avg_1 = (sum(Student.score_dict.get('1班'))) / Student.count_1
        avg_2 = (sum(Student.score_dict.get('2班'))) / Student.count_2

        if avg_1 > avg_2:
            print '一班第一'

        elif avg_1 == avg_2:
            print '排名相等'
        else:
            print '二班第一'


if __name__ == '__main__':

    student1 = Student('aa', 85, '1班')
    student2 = Student('bb', 85, '1班')
    student3 = Student('cc', 85, '2班')
    student4 = Student('dd', 85, '2班')

    Student.rank()


五、session and cookies  

	'''
把用户名存到cookie,再把该用户名当作session的键
还能验证登陆状态,还能查询

'''

from flask import session, redirect, make_response, request, Flask, render_template

app = Flask(__name__)
app.secret_key = 'dsadasd%dsa'


@app.route('/')
def index():
    user_name = request.cookies.get('user_name')
    if user_name:
        if session.get(user_name):
            return render_template('index.html')

    return redirect('/login')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':  # 判断请求方法
        user = request.form.get('user')
        passwd = request.form.get('password')
        if user == 'test' and passwd == '123456':
            session[user] = user
            res = make_response(redirect('/'))
            res.set_cookie('user_name', user)
            return res
    else:
        user_name = request.cookies.get('user_name')
        if user_name:
            if session.get(user_name):
                return redirect('/')

    return render_template('login.html')


if __name__ == '__main__':
    app.run(host='0.0.0.0')

六、

import time

def get_time(func):
    def wraper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        print("Spend:", end_time - start_time)
        return result
    return wraper

@get_time
def _list(n):
    l1 = [list(range(n)) for i in range(n)]
    del ge


@get_time
def _generator(n):
    ge = (tuple(range(n)) for i in range(n))
    del t1

_list(1000)
_generator(1000)






